{
  "version": 3,
  "sources": ["../../../src/functions/economy/transactions.ts"],
  "sourcesContent": ["// Connect to Database\nimport config from \"@config\"\nimport { default as pg } from \"pg\"\nconst db = new pg.Pool({\n\thost: config.database.oxbot.host,\n\tdatabase: config.database.oxbot.database,\n\tuser: config.database.oxbot.username,\n\tpassword: config.database.oxbot.password,\n\tport: 5432,\n\tssl: true\n})\n\nimport * as utils from \"rjutils-collection\"\n\n// Get Function\nexport const get = async(transactionId: string) => {\n\tconst data = await db.query(`select * from usertransactions where id = $1;`, [transactionId])\n\tif (data.rowCount !== 1) return 'N-FOUND'\n\n\treturn {\n\t\tid: data.rows[0].id,\n\t\tsuccess: data.rows[0].success,\n\t\ttimestamp: data.rows[0].timestamp,\n\t\tsender: {\n\t\t\tid: data.rows[0].senderid,\n\t\t\tamount: data.rows[0].senderamount,\n\t\t\ttype: data.rows[0].sendertype\n\t\t}, reciever: {\n\t\t\tid: data.rows[0].recieverid,\n\t\t\tamount: data.rows[0].recieveramount,\n\t\t\ttype: data.rows[0].recievertype\n\t\t}\n\t}\n}\n\ninterface log {\n\tsuccess: boolean\n\tsender: {\n\t\tid: string\n\t\tamount: number\n\t\ttype: string\n\t}\n\n\treciever: {\n\t\tid: string\n\t\tamount: number\n\t\ttype: string\n\t}\n}\n\n// Log Function\nexport const log = async(json: log) => {\n\tconst transactionId = utils.randomStr({\n\t\tlength: 20,\n\t\tnumbers: true,\n\t\tuppercase: true,\n\t\tlowercase: true,\n\t\tsymbols: false,\n\t\texclude: ''\n\t})\n\n\tif (json.sender.id === undefined) json.sender = {\n\t\tid: 'empty',\n\t\tamount: 0,\n\t\ttype: 'empty'\n\t}; if (json.reciever.id === undefined) json.reciever = {\n\t\tid: 'empty',\n\t\tamount: 0,\n\t\ttype: 'empty'\n\t}\n\n\tawait db.query(`insert into usertransactions values ($1, $2, $3, $4, $5, $6, $7, $8, $9)`, [\n\t\ttransactionId,\n\t\tjson.sender.id,\n\t\tjson.sender.amount,\n\t\tjson.sender.type,\n\t\tjson.reciever.id,\n\t\tjson.reciever.amount,\n\t\tjson.reciever.type,\n\t\tjson.success,\n\t\t(Math.floor(+new Date() / 1000))\n\t]); return {\n\t\tsuccess: true,\n\t\tid: transactionId\n\t}\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,oBAAmB;AACnB,gBAA8B;AAU9B,YAAuB;AATvB,MAAM,KAAK,IAAI,UAAAA,QAAG,KAAK;AAAA,EACtB,MAAM,cAAAC,QAAO,SAAS,MAAM;AAAA,EAC5B,UAAU,cAAAA,QAAO,SAAS,MAAM;AAAA,EAChC,MAAM,cAAAA,QAAO,SAAS,MAAM;AAAA,EAC5B,UAAU,cAAAA,QAAO,SAAS,MAAM;AAAA,EAChC,MAAM;AAAA,EACN,KAAK;AACN,CAAC;AAKM,MAAM,MAAM,OAAM,kBAA0B;AAClD,QAAM,OAAO,MAAM,GAAG,MAAM,iDAAiD,CAAC,aAAa,CAAC;AAC5F,MAAI,KAAK,aAAa;AAAG,WAAO;AAEhC,SAAO;AAAA,IACN,IAAI,KAAK,KAAK,CAAC,EAAE;AAAA,IACjB,SAAS,KAAK,KAAK,CAAC,EAAE;AAAA,IACtB,WAAW,KAAK,KAAK,CAAC,EAAE;AAAA,IACxB,QAAQ;AAAA,MACP,IAAI,KAAK,KAAK,CAAC,EAAE;AAAA,MACjB,QAAQ,KAAK,KAAK,CAAC,EAAE;AAAA,MACrB,MAAM,KAAK,KAAK,CAAC,EAAE;AAAA,IACpB;AAAA,IAAG,UAAU;AAAA,MACZ,IAAI,KAAK,KAAK,CAAC,EAAE;AAAA,MACjB,QAAQ,KAAK,KAAK,CAAC,EAAE;AAAA,MACrB,MAAM,KAAK,KAAK,CAAC,EAAE;AAAA,IACpB;AAAA,EACD;AACD;AAkBO,MAAM,MAAM,OAAM,SAAc;AACtC,QAAM,gBAAgB,MAAM,UAAU;AAAA,IACrC,QAAQ;AAAA,IACR,SAAS;AAAA,IACT,WAAW;AAAA,IACX,WAAW;AAAA,IACX,SAAS;AAAA,IACT,SAAS;AAAA,EACV,CAAC;AAED,MAAI,KAAK,OAAO,OAAO;AAAW,SAAK,SAAS;AAAA,MAC/C,IAAI;AAAA,MACJ,QAAQ;AAAA,MACR,MAAM;AAAA,IACP;AAAG,MAAI,KAAK,SAAS,OAAO;AAAW,SAAK,WAAW;AAAA,MACtD,IAAI;AAAA,MACJ,QAAQ;AAAA,MACR,MAAM;AAAA,IACP;AAEA,QAAM,GAAG,MAAM,4EAA4E;AAAA,IAC1F;AAAA,IACA,KAAK,OAAO;AAAA,IACZ,KAAK,OAAO;AAAA,IACZ,KAAK,OAAO;AAAA,IACZ,KAAK,SAAS;AAAA,IACd,KAAK,SAAS;AAAA,IACd,KAAK,SAAS;AAAA,IACd,KAAK;AAAA,IACJ,KAAK,MAAM,CAAC,oBAAI,KAAK,IAAI,GAAI;AAAA,EAC/B,CAAC;AAAG,SAAO;AAAA,IACV,SAAS;AAAA,IACT,IAAI;AAAA,EACL;AACD;",
  "names": ["pg", "config"]
}
