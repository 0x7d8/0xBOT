{
  "version": 3,
  "sources": ["../../src/functions/api.ts"],
  "sourcesContent": ["import { default as axios } from \"axios\"\n\n// Connect to Database\nimport config from \"@config\"\nimport { default as pg } from \"pg\"\nconst db = new pg.Pool({\n\thost: config.database.oxbot.host,\n\tdatabase: config.database.oxbot.database,\n\tuser: config.database.oxbot.username,\n\tpassword: config.database.oxbot.password,\n\tport: 5432,\n\tssl: true\n})\n\n// Create Client\nimport { PermissionsBitField } from \"discord.js\"\nimport { Client, GatewayIntentBits } from \"discord.js\"\nconst client = new Client({ intents: [\n\tGatewayIntentBits.Guilds\n] }); client.login(config.client.token)\n\nexport const checkSession = async(accessToken: string, tokenType: string, userid: string, guildid: string) => {\n\tconst dbuser = await db.query(`select * from usersessions where userid = $1 and token = $2 and tokentype = $3;`, [\n\t\tuserid,\n\t\taccessToken,\n\t\ttokenType\n\t]); if (dbuser.rowCount === 0 || dbuser.rows[0].expires < Math.floor(+new Date() / 1000)) {\n\t\t// Clear Rows\n\t\tif (dbuser.rowCount > 0 && dbuser.rows[0].expires < Math.floor(+new Date() / 1000)) {\n\t\t\tawait db.query(`delete from usersessions where userid = $1 and token = $2;`, [\n\t\t\t\tuserid,\n\t\t\t\taccessToken\n\t\t\t])\n\t\t}\n\n\t\ttry {\n\t\t\tconst req = await axios.get('https://discord.com/api/users/@me', {\n\t\t\t\theaders: {\n\t\t\t\t\tauthorization: `${tokenType} ${accessToken}`\n\t\t\t\t}\n\t\t\t}); const res = req.data\n\t\t\tif (res.id !== userid) return false\n\n\t\t\tconst guild = await client.guilds.fetch(guildid)\n\t\t\tconst user = await guild.members.fetch(userid)\n\t\t\tif (user.permissions.has(PermissionsBitField.Flags.Administrator)) {\n\t\t\t\tawait db.query(`insert into usersessions values ($1, $2, $3, $4);`, [\n\t\t\t\t\tuserid,\n\t\t\t\t\taccessToken,\n\t\t\t\t\ttokenType,\n\t\t\t\t\t(Math.floor(+new Date() / 1000))+150\n\t\t\t\t]); return true\n\t\t\t} else return false\n\t\t} catch(e) { return false }\n\t} else {\n\t\ttry {\n\t\t\tconst guild = await client.guilds.fetch(guildid)\n\t\t\tconst user = await guild.members.fetch(userid)\n\t\t\tif (user.permissions.has(PermissionsBitField.Flags.Administrator)) { return true }\n\t\t} catch(e) { return false }\n\t}\n}\n\nexport interface SetRequest {\n\tuser: {\n\t\tid: string\n\t\tname: string\n\t\ttag: string\n\t\temail: string\n\t\tavatar: string | null\n\t}\n\n\ttokens: {\n\t\taccess: string\n\t\trefresh: string\n\t}\n\n\tauth: string\n}\n\nexport interface GetResponse {\n\tid: string\n\tname: string\n\tavatar: string\n\ttag: string\n\temail: string\n\ttokens: {\n\t\taccess: string\n\t\trefresh: string\n\t}\n}\n\nexport const users = {\n\tset: async(json: SetRequest) => {\n\t\tconst data = await db.query(`select * from userlogins where id = $1;`, [json.user.id])\n\n\t\tif (data.rowCount !== 1) {\n\t\t\tawait db.query(`insert into userlogins values ($1, $2, $3, $4, $5, $6, $7, $8)`, [\n\t\t\t\tjson.user.id,\n\t\t\t\tjson.user.name,\n\t\t\t\tjson.user.tag,\n\t\t\t\tjson.user.email,\n\t\t\t\tjson.user.avatar,\n\t\t\t\tjson.auth,\n\t\t\t\tjson.tokens.access,\n\t\t\t\tjson.tokens.refresh\n\t\t\t])\n\t\t} else {\n\t\t\tawait db.query(`update userlogins set name = $2, tag = $3, email = $4, avatar = $5, authtoken = $6, accesstoken = $7, refreshtoken = $8 where id = $1;`, [\n\t\t\t\tjson.user.id,\n\t\t\t\tjson.user.name,\n\t\t\t\tjson.user.tag,\n\t\t\t\tjson.user.email,\n\t\t\t\tjson.user.avatar,\n\t\t\t\tjson.auth,\n\t\t\t\tjson.tokens.access,\n\t\t\t\tjson.tokens.refresh\n\t\t\t])\n\t\t}\n\t},\n\n\tget: async(authToken: string): Promise<GetResponse> => {\n\t\tconst data = await db.query(`select * from userlogins where authtoken = $1;`, [authToken])\n\t\tif (data.rowCount !== 1) return {\n\t\t\tid: null,\n\t\t\tname: null,\n\t\t\ttag: null,\n\t\t\tavatar: null,\n\t\t\temail: null,\n\t\t\ttokens: {\n\t\t\t\taccess: null,\n\t\t\t\trefresh: null\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tid: data.rows[0].id,\n\t\t\tname: data.rows[0].name,\n\t\t\ttag: data.rows[0].tag,\n\t\t\tavatar: data.rows[0].avatar,\n\t\t\temail: data.rows[0].email,\n\t\t\ttokens: {\n\t\t\t\taccess: data.rows[0].accesstoken,\n\t\t\t\trefresh: data.rows[0].refreshtoken\n\t\t\t}\n\t\t}\n\t},\n\n\trem: async(userId: string) => {\n\t\tawait db.query(`delete from userlogins where id = $1;`, [userId])\n\t}\n}\n\nexport const checkAuth = async(authToken: string, guildId: string) => {\n\t// Get Infos\n\tconst userInfos = await users.get(authToken)\n\tif (!userInfos.id) return false\n\n\t// Check for Session\n\tconst dbuser = await db.query(`select * from usersessions where userid = $1 and token = $2 and tokentype = $3;`, [\n\t\tuserInfos.id,\n\t\tuserInfos.tokens.access,\n\t\t'Bearer'\n\t]); if (dbuser.rowCount === 0 || dbuser.rows[0].expires < Math.floor(+new Date() / 1000)) {\n\t\t// Clear Rows\n\t\tif (dbuser.rowCount > 0 && dbuser.rows[0].expires < Math.floor(+new Date() / 1000)) {\n\t\t\tawait db.query(`delete from usersessions where userid = $1 and token = $2;`, [\n\t\t\t\tuserInfos.id,\n\t\t\t\tuserInfos.tokens.access\n\t\t\t])\n\t\t}\n\n\t\ttry {\n\t\t\tconst guild = await client.guilds.fetch(guildId)\n\t\t\tconst user = await guild.members.fetch(userInfos.id)\n\t\t\tif (user.permissions.has(PermissionsBitField.Flags.Administrator)) {\n\t\t\t\tawait db.query(`insert into usersessions values ($1, $2, $3, $4);`, [\n\t\t\t\t\tuserInfos.id,\n\t\t\t\t\tuserInfos.tokens.access,\n\t\t\t\t\t'Bearer',\n\t\t\t\t\t(Math.floor(+new Date() / 1000))+150\n\t\t\t\t]); return true\n\t\t\t} else return false\n\t\t} catch(e) { return false }\n\t} else {\n\t\ttry {\n\t\t\tconst guild = await client.guilds.fetch(guildId)\n\t\t\tconst user = await guild.members.fetch(userInfos.id)\n\t\t\tif (user.permissions.has(PermissionsBitField.Flags.Administrator)) { return true }\n\t\t} catch(e) { return false }\n\t}\n}"],
  "mappings": "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",
  "names": ["import_discord", "pg", "config", "axios"]
}
